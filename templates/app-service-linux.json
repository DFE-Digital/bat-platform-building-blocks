{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appServiceName": {
      "type": "string",
      "metadata": {
        "description": "The name of the App Service"
      }
    },
    "appServicePlanName": {
      "type": "string",
      "metadata": {
        "description": "The name of the App Service Plan"
      }
    },
    "appServicePlanResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Resource Group where the ASP lives"
      }
    },
    "appServiceAppSettings": {
      "type": "array",
      "defaultValue": []
    },
    "appServiceConnectionStrings": {
      "type": "array",
      "defaultValue": []
    },
    "runtimeStack": {
      "type": "string",
      "metadata": {
        "description": "The name of the runtime stack for the container"
      }
    },
    "customStartupCommand": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Custom startup command for the container running on the app service"
      }
    },
    "customHostName": {
      "type": "string",
      "defaultValue": ""
    },
    "certificateThumbprint": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "This can be passed into the template via the reference function: [reference(resourceId(parameters('certificateResourceGroup'), 'Microsoft.Web/certificates', parameters('certificateName')), '2016-03-01').Thumbprint]"
      }
    },
    "customDomains":{
      "type": "array",
      "defaultValue": [{
        "domainName": "[parameters('customHostName')]",
        "certificateThumbprint": "[parameters('certificateThumbprint')]"
      }],
      "metadata": {
        "description": "custom domain information [{domainName: domain.com, certificateThumbprint: thumbprint}]"
      }
    },
    "deploymentUsingSlots": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Conditional use of slots when deploying webapp"
      }
    },
    "http20Enabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Configures a web site to allow clients to connect over http2.0"
      }
    },
    "appAlwaysOn": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Don't let the app sleep after a period of inactivity"
      }
    },
    "httpLoggingEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable logging of HTTP calls to the app"
      }
    },
    "healthCheckPath":{
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "When more than 1 app service instance is configured, the relative path which determines the health of an instance for the load balancer"
      }
    },
    "resourceTags": {
      "type": "object",
      "defaultValue": {}
    }
  },
  "variables": {
    "appServicePlanId": "[resourceId(parameters('appServicePlanResourceGroup'), 'Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
    "useCustomDomains": "[and(greater(length(parameters('customDomains')), 0), greater(length(parameters('customDomains')[0].domainName), 0))]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/sites",
      "name": "[parameters('appServiceName')]",
      "kind": "app,linux,container",
      "apiVersion": "2020-09-01",
      "location": "[resourceGroup().location]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "clientAffinityEnabled": false,
        "serverFarmId": "[variables('appServicePlanId')]",
        "siteConfig": {
          "alwaysOn": "[parameters('appAlwaysOn')]",
          "httpLoggingEnabled": "[parameters('httpLoggingEnabled')]",
          "appSettings": "[parameters('appServiceAppSettings')]",
          "connectionStrings": "[parameters('appServiceConnectionStrings')]",
          "linuxFxVersion": "[if(not(parameters('deploymentUsingSlots')), parameters('runtimeStack'), json('null'))]",
          "appCommandLine": "[parameters('customStartupCommand')]",
          "http20Enabled": "[parameters('http20Enabled')]",
          "healthCheckPath": "[parameters('healthCheckPath')]"
        },
        "httpsOnly": true
      }
    },
    {
      "name": "[concat(parameters('appServiceName'), '/',  'staging')]",
      "condition": "[parameters('deploymentUsingSlots')]",
      "type": "Microsoft.Web/sites/slots",
      "apiVersion": "2016-08-01",
      "location": "[resourceGroup().location]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "clientAffinityEnabled": false,
        "serverFarmId": "[variables('appServicePlanId')]",
        "siteConfig": {
          "alwaysOn": false,
          "linuxFxVersion": "[parameters('runtimeStack')]",
          "appSettings": "[parameters('appServiceAppSettings')]",
          "connectionStrings": "[parameters('appServiceConnectionStrings')]",
          "appCommandLine": "[parameters('customStartupCommand')]",
          "http20Enabled": "[parameters('http20Enabled')]",
          "healthCheckPath": "[parameters('healthCheckPath')]"
        },
        "httpsOnly": true,
        "healthCheckPath": "[parameters('healthCheckPath')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/hostnameBindings",
      "condition": "[variables('useCustomDomains')]",
      "name": "[concat(parameters('appServiceName'), '/', if(variables('useCustomDomains'), parameters('customDomains')[copyIndex('customDomainsIndex')].domainName, 'placeholder'))]",
      "apiVersion": "2016-08-01",
      "location": "[resourceGroup().location]",
      "tags": "[parameters('resourceTags')]",
      "properties": {
        "sslState": "SniEnabled",
        "thumbprint": "[parameters('customDomains')[copyIndex('customDomainsIndex')].certificateThumbprint]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]"
      ],
      "copy":{
        "name": "customDomainsIndex",
        "mode": "serial",
        "batchSize": 1,
        "count": "[length(parameters('customDomains'))]"
      }
    }
  ],
  "outputs": {
    "possibleOutboundIpAddresses": {
      "type": "array",
      "value": "[split(reference(parameters('appServiceName')).possibleOutboundIpAddresses, ',')]"
    }
  }
}
